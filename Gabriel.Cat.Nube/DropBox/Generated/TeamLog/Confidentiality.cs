// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamLog
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The confidentiality object</para>
    /// </summary>
    public class Confidentiality
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<Confidentiality> Encoder = new ConfidentialityEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<Confidentiality> Decoder = new ConfidentialityDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="Confidentiality" />
        /// class.</para>
        /// </summary>
        public Confidentiality()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Confidential</para>
        /// </summary>
        public bool IsConfidential
        {
            get
            {
                return this is Confidential;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Confidential, or <c>null</c>.</para>
        /// </summary>
        public Confidential AsConfidential
        {
            get
            {
                return this as Confidential;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is NonConfidential</para>
        /// </summary>
        public bool IsNonConfidential
        {
            get
            {
                return this is NonConfidential;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a NonConfidential, or <c>null</c>.</para>
        /// </summary>
        public NonConfidential AsNonConfidential
        {
            get
            {
                return this as NonConfidential;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="Confidentiality" />.</para>
        /// </summary>
        private class ConfidentialityEncoder : enc.StructEncoder<Confidentiality>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(Confidentiality value, enc.IJsonWriter writer)
            {
                if (value is Confidential)
                {
                    WriteProperty(".tag", "confidential", writer, enc.StringEncoder.Instance);
                    Confidential.Encoder.EncodeFields((Confidential)value, writer);
                    return;
                }
                if (value is NonConfidential)
                {
                    WriteProperty(".tag", "non_confidential", writer, enc.StringEncoder.Instance);
                    NonConfidential.Encoder.EncodeFields((NonConfidential)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="Confidentiality" />.</para>
        /// </summary>
        private class ConfidentialityDecoder : enc.UnionDecoder<Confidentiality>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="Confidentiality" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override Confidentiality Create()
            {
                return new Confidentiality();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override Confidentiality Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "confidential":
                        return Confidential.Decoder.DecodeFields(reader);
                    case "non_confidential":
                        return NonConfidential.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The confidential object</para>
        /// </summary>
        public sealed class Confidential : Confidentiality
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Confidential> Encoder = new ConfidentialEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Confidential> Decoder = new ConfidentialDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Confidential" />
            /// class.</para>
            /// </summary>
            private Confidential()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Confidential</para>
            /// </summary>
            public static readonly Confidential Instance = new Confidential();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Confidential" />.</para>
            /// </summary>
            private class ConfidentialEncoder : enc.StructEncoder<Confidential>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Confidential value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Confidential" />.</para>
            /// </summary>
            private class ConfidentialDecoder : enc.StructDecoder<Confidential>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Confidential" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Confidential Create()
                {
                    return Confidential.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The non confidential object</para>
        /// </summary>
        public sealed class NonConfidential : Confidentiality
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<NonConfidential> Encoder = new NonConfidentialEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<NonConfidential> Decoder = new NonConfidentialDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="NonConfidential" />
            /// class.</para>
            /// </summary>
            private NonConfidential()
            {
            }

            /// <summary>
            /// <para>A singleton instance of NonConfidential</para>
            /// </summary>
            public static readonly NonConfidential Instance = new NonConfidential();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="NonConfidential" />.</para>
            /// </summary>
            private class NonConfidentialEncoder : enc.StructEncoder<NonConfidential>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(NonConfidential value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="NonConfidential" />.</para>
            /// </summary>
            private class NonConfidentialDecoder : enc.StructDecoder<NonConfidential>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="NonConfidential" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override NonConfidential Create()
                {
                    return NonConfidential.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : Confidentiality
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}

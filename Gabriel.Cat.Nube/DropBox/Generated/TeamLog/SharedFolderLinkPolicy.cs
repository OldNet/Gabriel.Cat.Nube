// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamLog
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The shared folder link policy object</para>
    /// </summary>
    public class SharedFolderLinkPolicy
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<SharedFolderLinkPolicy> Encoder = new SharedFolderLinkPolicyEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<SharedFolderLinkPolicy> Decoder = new SharedFolderLinkPolicyDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SharedFolderLinkPolicy" />
        /// class.</para>
        /// </summary>
        public SharedFolderLinkPolicy()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is MembersOnly</para>
        /// </summary>
        public bool IsMembersOnly
        {
            get
            {
                return this is MembersOnly;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a MembersOnly, or <c>null</c>.</para>
        /// </summary>
        public MembersOnly AsMembersOnly
        {
            get
            {
                return this as MembersOnly;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is MembersAndTeam</para>
        /// </summary>
        public bool IsMembersAndTeam
        {
            get
            {
                return this is MembersAndTeam;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a MembersAndTeam, or <c>null</c>.</para>
        /// </summary>
        public MembersAndTeam AsMembersAndTeam
        {
            get
            {
                return this as MembersAndTeam;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Anyone</para>
        /// </summary>
        public bool IsAnyone
        {
            get
            {
                return this is Anyone;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Anyone, or <c>null</c>.</para>
        /// </summary>
        public Anyone AsAnyone
        {
            get
            {
                return this as Anyone;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="SharedFolderLinkPolicy" />.</para>
        /// </summary>
        private class SharedFolderLinkPolicyEncoder : enc.StructEncoder<SharedFolderLinkPolicy>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(SharedFolderLinkPolicy value, enc.IJsonWriter writer)
            {
                if (value is MembersOnly)
                {
                    WriteProperty(".tag", "members_only", writer, enc.StringEncoder.Instance);
                    MembersOnly.Encoder.EncodeFields((MembersOnly)value, writer);
                    return;
                }
                if (value is MembersAndTeam)
                {
                    WriteProperty(".tag", "members_and_team", writer, enc.StringEncoder.Instance);
                    MembersAndTeam.Encoder.EncodeFields((MembersAndTeam)value, writer);
                    return;
                }
                if (value is Anyone)
                {
                    WriteProperty(".tag", "anyone", writer, enc.StringEncoder.Instance);
                    Anyone.Encoder.EncodeFields((Anyone)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="SharedFolderLinkPolicy" />.</para>
        /// </summary>
        private class SharedFolderLinkPolicyDecoder : enc.UnionDecoder<SharedFolderLinkPolicy>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="SharedFolderLinkPolicy"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override SharedFolderLinkPolicy Create()
            {
                return new SharedFolderLinkPolicy();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override SharedFolderLinkPolicy Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "members_only":
                        return MembersOnly.Decoder.DecodeFields(reader);
                    case "members_and_team":
                        return MembersAndTeam.Decoder.DecodeFields(reader);
                    case "anyone":
                        return Anyone.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The members only object</para>
        /// </summary>
        public sealed class MembersOnly : SharedFolderLinkPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<MembersOnly> Encoder = new MembersOnlyEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<MembersOnly> Decoder = new MembersOnlyDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="MembersOnly" />
            /// class.</para>
            /// </summary>
            private MembersOnly()
            {
            }

            /// <summary>
            /// <para>A singleton instance of MembersOnly</para>
            /// </summary>
            public static readonly MembersOnly Instance = new MembersOnly();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="MembersOnly" />.</para>
            /// </summary>
            private class MembersOnlyEncoder : enc.StructEncoder<MembersOnly>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(MembersOnly value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="MembersOnly" />.</para>
            /// </summary>
            private class MembersOnlyDecoder : enc.StructDecoder<MembersOnly>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="MembersOnly" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override MembersOnly Create()
                {
                    return MembersOnly.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The members and team object</para>
        /// </summary>
        public sealed class MembersAndTeam : SharedFolderLinkPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<MembersAndTeam> Encoder = new MembersAndTeamEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<MembersAndTeam> Decoder = new MembersAndTeamDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="MembersAndTeam" />
            /// class.</para>
            /// </summary>
            private MembersAndTeam()
            {
            }

            /// <summary>
            /// <para>A singleton instance of MembersAndTeam</para>
            /// </summary>
            public static readonly MembersAndTeam Instance = new MembersAndTeam();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="MembersAndTeam" />.</para>
            /// </summary>
            private class MembersAndTeamEncoder : enc.StructEncoder<MembersAndTeam>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(MembersAndTeam value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="MembersAndTeam" />.</para>
            /// </summary>
            private class MembersAndTeamDecoder : enc.StructDecoder<MembersAndTeam>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="MembersAndTeam" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override MembersAndTeam Create()
                {
                    return MembersAndTeam.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The anyone object</para>
        /// </summary>
        public sealed class Anyone : SharedFolderLinkPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Anyone> Encoder = new AnyoneEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Anyone> Decoder = new AnyoneDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Anyone" /> class.</para>
            /// </summary>
            private Anyone()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Anyone</para>
            /// </summary>
            public static readonly Anyone Instance = new Anyone();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Anyone" />.</para>
            /// </summary>
            private class AnyoneEncoder : enc.StructEncoder<Anyone>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Anyone value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Anyone" />.</para>
            /// </summary>
            private class AnyoneDecoder : enc.StructDecoder<Anyone>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Anyone" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Anyone Create()
                {
                    return Anyone.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : SharedFolderLinkPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}

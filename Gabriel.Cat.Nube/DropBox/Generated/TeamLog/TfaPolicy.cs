// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamLog
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Two factor authentication policy</para>
    /// </summary>
    public class TfaPolicy
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<TfaPolicy> Encoder = new TfaPolicyEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<TfaPolicy> Decoder = new TfaPolicyDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="TfaPolicy" /> class.</para>
        /// </summary>
        public TfaPolicy()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is AllowDisable</para>
        /// </summary>
        public bool IsAllowDisable
        {
            get
            {
                return this is AllowDisable;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a AllowDisable, or <c>null</c>.</para>
        /// </summary>
        public AllowDisable AsAllowDisable
        {
            get
            {
                return this as AllowDisable;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is StickyEnable</para>
        /// </summary>
        public bool IsStickyEnable
        {
            get
            {
                return this is StickyEnable;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a StickyEnable, or <c>null</c>.</para>
        /// </summary>
        public StickyEnable AsStickyEnable
        {
            get
            {
                return this as StickyEnable;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="TfaPolicy" />.</para>
        /// </summary>
        private class TfaPolicyEncoder : enc.StructEncoder<TfaPolicy>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(TfaPolicy value, enc.IJsonWriter writer)
            {
                if (value is AllowDisable)
                {
                    WriteProperty(".tag", "allow_disable", writer, enc.StringEncoder.Instance);
                    AllowDisable.Encoder.EncodeFields((AllowDisable)value, writer);
                    return;
                }
                if (value is StickyEnable)
                {
                    WriteProperty(".tag", "sticky_enable", writer, enc.StringEncoder.Instance);
                    StickyEnable.Encoder.EncodeFields((StickyEnable)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="TfaPolicy" />.</para>
        /// </summary>
        private class TfaPolicyDecoder : enc.UnionDecoder<TfaPolicy>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="TfaPolicy" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override TfaPolicy Create()
            {
                return new TfaPolicy();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override TfaPolicy Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "allow_disable":
                        return AllowDisable.Decoder.DecodeFields(reader);
                    case "sticky_enable":
                        return StickyEnable.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The allow disable object</para>
        /// </summary>
        public sealed class AllowDisable : TfaPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<AllowDisable> Encoder = new AllowDisableEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<AllowDisable> Decoder = new AllowDisableDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="AllowDisable" />
            /// class.</para>
            /// </summary>
            private AllowDisable()
            {
            }

            /// <summary>
            /// <para>A singleton instance of AllowDisable</para>
            /// </summary>
            public static readonly AllowDisable Instance = new AllowDisable();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="AllowDisable" />.</para>
            /// </summary>
            private class AllowDisableEncoder : enc.StructEncoder<AllowDisable>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(AllowDisable value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="AllowDisable" />.</para>
            /// </summary>
            private class AllowDisableDecoder : enc.StructDecoder<AllowDisable>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="AllowDisable" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override AllowDisable Create()
                {
                    return AllowDisable.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The sticky enable object</para>
        /// </summary>
        public sealed class StickyEnable : TfaPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<StickyEnable> Encoder = new StickyEnableEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<StickyEnable> Decoder = new StickyEnableDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="StickyEnable" />
            /// class.</para>
            /// </summary>
            private StickyEnable()
            {
            }

            /// <summary>
            /// <para>A singleton instance of StickyEnable</para>
            /// </summary>
            public static readonly StickyEnable Instance = new StickyEnable();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="StickyEnable" />.</para>
            /// </summary>
            private class StickyEnableEncoder : enc.StructEncoder<StickyEnable>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(StickyEnable value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="StickyEnable" />.</para>
            /// </summary>
            private class StickyEnableDecoder : enc.StructDecoder<StickyEnable>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="StickyEnable" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override StickyEnable Create()
                {
                    return StickyEnable.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : TfaPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}

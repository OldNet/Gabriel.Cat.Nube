// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamLog
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Device's logged information.</para>
    /// </summary>
    /// <seealso cref="DeviceChangeIpDesktopDetails" />
    /// <seealso cref="DeviceChangeIpMobileDetails" />
    /// <seealso cref="DeviceDeleteOnUnlinkFailDetails" />
    /// <seealso cref="DeviceDeleteOnUnlinkSuccessDetails" />
    /// <seealso cref="DeviceLinkSuccessDetails" />
    /// <seealso cref="DeviceUnlinkDetails" />
    public class DeviceLogInfo
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<DeviceLogInfo> Encoder = new DeviceLogInfoEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<DeviceLogInfo> Decoder = new DeviceLogInfoDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="DeviceLogInfo" /> class.</para>
        /// </summary>
        /// <param name="deviceId">Device unique id. Might be missing due to historical data
        /// gap.</param>
        /// <param name="displayName">Device display name. Might be missing due to historical
        /// data gap.</param>
        /// <param name="isEmmManaged">True if this device is emm managed, false otherwise.
        /// Might be missing due to historical data gap.</param>
        /// <param name="platform">Device platform name. Might be missing due to historical
        /// data gap.</param>
        /// <param name="macAddress">Device mac address. Might be missing due to historical
        /// data gap.</param>
        /// <param name="osVersion">Device OS version. Might be missing due to historical data
        /// gap.</param>
        /// <param name="deviceType">Device type. Might be missing due to historical data
        /// gap.</param>
        /// <param name="ipAddress">IP address. Might be missing due to historical data
        /// gap.</param>
        /// <param name="lastActivity">Last activity. Might be missing due to historical data
        /// gap.</param>
        /// <param name="appVersion">Linking app version. Might be missing due to historical
        /// data gap.</param>
        public DeviceLogInfo(string deviceId = null,
                             string displayName = null,
                             bool? isEmmManaged = null,
                             string platform = null,
                             string macAddress = null,
                             string osVersion = null,
                             string deviceType = null,
                             string ipAddress = null,
                             string lastActivity = null,
                             string appVersion = null)
        {
            this.DeviceId = deviceId;
            this.DisplayName = displayName;
            this.IsEmmManaged = isEmmManaged;
            this.Platform = platform;
            this.MacAddress = macAddress;
            this.OsVersion = osVersion;
            this.DeviceType = deviceType;
            this.IpAddress = ipAddress;
            this.LastActivity = lastActivity;
            this.AppVersion = appVersion;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="DeviceLogInfo" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public DeviceLogInfo()
        {
        }

        /// <summary>
        /// <para>Device unique id. Might be missing due to historical data gap.</para>
        /// </summary>
        public string DeviceId { get; protected set; }

        /// <summary>
        /// <para>Device display name. Might be missing due to historical data gap.</para>
        /// </summary>
        public string DisplayName { get; protected set; }

        /// <summary>
        /// <para>True if this device is emm managed, false otherwise. Might be missing due to
        /// historical data gap.</para>
        /// </summary>
        public bool? IsEmmManaged { get; protected set; }

        /// <summary>
        /// <para>Device platform name. Might be missing due to historical data gap.</para>
        /// </summary>
        public string Platform { get; protected set; }

        /// <summary>
        /// <para>Device mac address. Might be missing due to historical data gap.</para>
        /// </summary>
        public string MacAddress { get; protected set; }

        /// <summary>
        /// <para>Device OS version. Might be missing due to historical data gap.</para>
        /// </summary>
        public string OsVersion { get; protected set; }

        /// <summary>
        /// <para>Device type. Might be missing due to historical data gap.</para>
        /// </summary>
        public string DeviceType { get; protected set; }

        /// <summary>
        /// <para>IP address. Might be missing due to historical data gap.</para>
        /// </summary>
        public string IpAddress { get; protected set; }

        /// <summary>
        /// <para>Last activity. Might be missing due to historical data gap.</para>
        /// </summary>
        public string LastActivity { get; protected set; }

        /// <summary>
        /// <para>Linking app version. Might be missing due to historical data gap.</para>
        /// </summary>
        public string AppVersion { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="DeviceLogInfo" />.</para>
        /// </summary>
        private class DeviceLogInfoEncoder : enc.StructEncoder<DeviceLogInfo>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(DeviceLogInfo value, enc.IJsonWriter writer)
            {
                if (value.DeviceId != null)
                {
                    WriteProperty("device_id", value.DeviceId, writer, enc.StringEncoder.Instance);
                }
                if (value.DisplayName != null)
                {
                    WriteProperty("display_name", value.DisplayName, writer, enc.StringEncoder.Instance);
                }
                if (value.IsEmmManaged != null)
                {
                    WriteProperty("is_emm_managed", value.IsEmmManaged.Value, writer, enc.BooleanEncoder.Instance);
                }
                if (value.Platform != null)
                {
                    WriteProperty("platform", value.Platform, writer, enc.StringEncoder.Instance);
                }
                if (value.MacAddress != null)
                {
                    WriteProperty("mac_address", value.MacAddress, writer, enc.StringEncoder.Instance);
                }
                if (value.OsVersion != null)
                {
                    WriteProperty("os_version", value.OsVersion, writer, enc.StringEncoder.Instance);
                }
                if (value.DeviceType != null)
                {
                    WriteProperty("device_type", value.DeviceType, writer, enc.StringEncoder.Instance);
                }
                if (value.IpAddress != null)
                {
                    WriteProperty("ip_address", value.IpAddress, writer, enc.StringEncoder.Instance);
                }
                if (value.LastActivity != null)
                {
                    WriteProperty("last_activity", value.LastActivity, writer, enc.StringEncoder.Instance);
                }
                if (value.AppVersion != null)
                {
                    WriteProperty("app_version", value.AppVersion, writer, enc.StringEncoder.Instance);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="DeviceLogInfo" />.</para>
        /// </summary>
        private class DeviceLogInfoDecoder : enc.StructDecoder<DeviceLogInfo>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="DeviceLogInfo" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override DeviceLogInfo Create()
            {
                return new DeviceLogInfo();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(DeviceLogInfo value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "device_id":
                        value.DeviceId = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "display_name":
                        value.DisplayName = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "is_emm_managed":
                        value.IsEmmManaged = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "platform":
                        value.Platform = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "mac_address":
                        value.MacAddress = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "os_version":
                        value.OsVersion = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "device_type":
                        value.DeviceType = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "ip_address":
                        value.IpAddress = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "last_activity":
                        value.LastActivity = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "app_version":
                        value.AppVersion = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}

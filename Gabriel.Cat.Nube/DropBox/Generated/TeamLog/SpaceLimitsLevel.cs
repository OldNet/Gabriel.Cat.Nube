// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamLog
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The space limits level object</para>
    /// </summary>
    public class SpaceLimitsLevel
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<SpaceLimitsLevel> Encoder = new SpaceLimitsLevelEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<SpaceLimitsLevel> Decoder = new SpaceLimitsLevelDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SpaceLimitsLevel" />
        /// class.</para>
        /// </summary>
        public SpaceLimitsLevel()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Generous</para>
        /// </summary>
        public bool IsGenerous
        {
            get
            {
                return this is Generous;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Generous, or <c>null</c>.</para>
        /// </summary>
        public Generous AsGenerous
        {
            get
            {
                return this as Generous;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Moderate</para>
        /// </summary>
        public bool IsModerate
        {
            get
            {
                return this is Moderate;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Moderate, or <c>null</c>.</para>
        /// </summary>
        public Moderate AsModerate
        {
            get
            {
                return this as Moderate;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is NoLimit</para>
        /// </summary>
        public bool IsNoLimit
        {
            get
            {
                return this is NoLimit;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a NoLimit, or <c>null</c>.</para>
        /// </summary>
        public NoLimit AsNoLimit
        {
            get
            {
                return this as NoLimit;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Strict</para>
        /// </summary>
        public bool IsStrict
        {
            get
            {
                return this is Strict;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Strict, or <c>null</c>.</para>
        /// </summary>
        public Strict AsStrict
        {
            get
            {
                return this as Strict;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="SpaceLimitsLevel" />.</para>
        /// </summary>
        private class SpaceLimitsLevelEncoder : enc.StructEncoder<SpaceLimitsLevel>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(SpaceLimitsLevel value, enc.IJsonWriter writer)
            {
                if (value is Generous)
                {
                    WriteProperty(".tag", "generous", writer, enc.StringEncoder.Instance);
                    Generous.Encoder.EncodeFields((Generous)value, writer);
                    return;
                }
                if (value is Moderate)
                {
                    WriteProperty(".tag", "moderate", writer, enc.StringEncoder.Instance);
                    Moderate.Encoder.EncodeFields((Moderate)value, writer);
                    return;
                }
                if (value is NoLimit)
                {
                    WriteProperty(".tag", "no_limit", writer, enc.StringEncoder.Instance);
                    NoLimit.Encoder.EncodeFields((NoLimit)value, writer);
                    return;
                }
                if (value is Strict)
                {
                    WriteProperty(".tag", "strict", writer, enc.StringEncoder.Instance);
                    Strict.Encoder.EncodeFields((Strict)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="SpaceLimitsLevel" />.</para>
        /// </summary>
        private class SpaceLimitsLevelDecoder : enc.UnionDecoder<SpaceLimitsLevel>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="SpaceLimitsLevel" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override SpaceLimitsLevel Create()
            {
                return new SpaceLimitsLevel();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override SpaceLimitsLevel Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "generous":
                        return Generous.Decoder.DecodeFields(reader);
                    case "moderate":
                        return Moderate.Decoder.DecodeFields(reader);
                    case "no_limit":
                        return NoLimit.Decoder.DecodeFields(reader);
                    case "strict":
                        return Strict.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The generous object</para>
        /// </summary>
        public sealed class Generous : SpaceLimitsLevel
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Generous> Encoder = new GenerousEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Generous> Decoder = new GenerousDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Generous" /> class.</para>
            /// </summary>
            private Generous()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Generous</para>
            /// </summary>
            public static readonly Generous Instance = new Generous();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Generous" />.</para>
            /// </summary>
            private class GenerousEncoder : enc.StructEncoder<Generous>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Generous value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Generous" />.</para>
            /// </summary>
            private class GenerousDecoder : enc.StructDecoder<Generous>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Generous" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Generous Create()
                {
                    return Generous.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The moderate object</para>
        /// </summary>
        public sealed class Moderate : SpaceLimitsLevel
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Moderate> Encoder = new ModerateEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Moderate> Decoder = new ModerateDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Moderate" /> class.</para>
            /// </summary>
            private Moderate()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Moderate</para>
            /// </summary>
            public static readonly Moderate Instance = new Moderate();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Moderate" />.</para>
            /// </summary>
            private class ModerateEncoder : enc.StructEncoder<Moderate>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Moderate value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Moderate" />.</para>
            /// </summary>
            private class ModerateDecoder : enc.StructDecoder<Moderate>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Moderate" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Moderate Create()
                {
                    return Moderate.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The no limit object</para>
        /// </summary>
        public sealed class NoLimit : SpaceLimitsLevel
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<NoLimit> Encoder = new NoLimitEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<NoLimit> Decoder = new NoLimitDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="NoLimit" /> class.</para>
            /// </summary>
            private NoLimit()
            {
            }

            /// <summary>
            /// <para>A singleton instance of NoLimit</para>
            /// </summary>
            public static readonly NoLimit Instance = new NoLimit();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="NoLimit" />.</para>
            /// </summary>
            private class NoLimitEncoder : enc.StructEncoder<NoLimit>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(NoLimit value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="NoLimit" />.</para>
            /// </summary>
            private class NoLimitDecoder : enc.StructDecoder<NoLimit>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="NoLimit" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override NoLimit Create()
                {
                    return NoLimit.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The strict object</para>
        /// </summary>
        public sealed class Strict : SpaceLimitsLevel
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Strict> Encoder = new StrictEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Strict> Decoder = new StrictDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Strict" /> class.</para>
            /// </summary>
            private Strict()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Strict</para>
            /// </summary>
            public static readonly Strict Instance = new Strict();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Strict" />.</para>
            /// </summary>
            private class StrictEncoder : enc.StructEncoder<Strict>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Strict value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Strict" />.</para>
            /// </summary>
            private class StrictDecoder : enc.StructDecoder<Strict>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Strict" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Strict Create()
                {
                    return Strict.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : SpaceLimitsLevel
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}
